package dev.zalaya.jade.persistence.repository;

import dev.zalaya.jade.persistence.annotation.PersistenceTestConfiguration;
import dev.zalaya.jade.persistence.entity.*;

import jakarta.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.*;
import org.springframework.test.context.jdbc.Sql;

import static dev.zalaya.jade.persistence.fixture.DocumentEntityFixtures.*;
import static dev.zalaya.jade.persistence.fixture.ProjectEntityFixtures.*;

import static org.assertj.core.api.Assertions.*;

@PersistenceTestConfiguration
@Sql(statements = "INSERT INTO projects (id, name, path, created_at) VALUES (1, 'Project', '/project', CURRENT_TIMESTAMP)")
class DocumentRepositoryTest {

    @Autowired
    private DocumentRepository repository;

    @Autowired
    private EntityManager manager;

    @Test
    void givenNewDocument_whenSave_thenAutogeneratedFieldsAreGenerated() {
        // Given
        ProjectEntity persistedProject = manager.getReference(ProjectEntity.class, 1L);
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(persistedProject);

        // When
        DocumentEntity persistedDocument = repository.saveAndFlush(document);

        // Then
        assertThat(persistedDocument.getId()).isNotNull();
        assertThat(persistedDocument.getProject().getId()).isEqualTo(1L);
        assertThat(persistedDocument.getCreatedAt()).isNotNull();
        assertThat(persistedDocument.getUpdatedAt()).isNull();
    }

    @Test
    void givenNewProjectWithoutName_whenSave_thenThrowsDataIntegrityViolationException() {
        // Given
        ProjectEntity persistedProject = manager.getReference(ProjectEntity.class, 1L);
        DocumentEntity document = aDocumentEntityWithDefaultPathWithProjectAndName(persistedProject, null);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    void givenNewProjectWithoutPath_whenSave_thenThrowsDataIntegrityViolationException() {
        // Given
        ProjectEntity persistedProject = manager.getReference(ProjectEntity.class, 1L);
        DocumentEntity document = aDocumentEntityWithDefaultNameWithProjectAndPath(persistedProject, null);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    void givenNewProjectWithoutProject_whenSave_thenThrowsDataIntegrityViolationException() {
        // Given
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(null);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    void givenPersistedDocument_whenSave_thenUpdateAtIsUpdated() {
        // Given
        ProjectEntity persistedProject = manager.getReference(ProjectEntity.class, 1L);
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(persistedProject);
        DocumentEntity persistedDocument = repository.saveAndFlush(document);
        persistedDocument.setName("Updated Document");
        persistedDocument.setPath("/updated-document");

        // When
        DocumentEntity updatedDocument = repository.saveAndFlush(persistedDocument);

        // Then
        assertThat(updatedDocument.getCreatedAt()).isEqualTo(persistedDocument.getCreatedAt());
        assertThat(updatedDocument.getUpdatedAt()).isNotNull().isAfterOrEqualTo(persistedDocument.getUpdatedAt());
    }

    @Test
    void givenDocumentWithoutProject_whenSave_thenThrowsDataIntegrityViolationException() {
        // Given
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(null);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    void givenDocumentWithTransientProject_whenSave_thenThrowsInvalidDataAccessApiUsageException() {
        // Given
        ProjectEntity project = aProjectEntityWithDefaultNameAndPath();
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(project);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(InvalidDataAccessApiUsageException.class);
    }

    @Test
    void givenDocumentWithNonExistentProject_whenSave_thenThrowsDataIntegrityViolationException() {
        // Given
        ProjectEntity project = aProjectEntityWithDefaultIdNameAndPath();
        DocumentEntity document = aDocumentEntityWithDefaultNameAndPathWithProject(project);

        // When
        Executable executable = () -> repository.saveAndFlush(document);

        // Then
        assertThatThrownBy(executable::execute).isInstanceOf(DataIntegrityViolationException.class);
    }

}
